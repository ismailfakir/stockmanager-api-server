# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install
    - run: npm run build --if-present
    - run: npm test
    - name: Make env1 file
      uses: SpicyPizza/create-envfile@v1
      with:
        envkey_DB_DATABASE: ${{ secrets.DB_DATABASE }}
        envkey_DB_HOST: ${{ secrets.DB_HOST }}
        envkey_DB_USER: ${{ secrets.DB_USER }}
        envkey_DB_PORT: ${{ secrets.DB_PORT }}
        envkey_DB_PASS: ${{ secrets.DB_PASS }}
        directory: ./
        file_name: .env1
    - name: Test printing your secret (Remove this step in production)
      run: cat .env1
    - name: Create env file
      run: ./.github/scripts/create_dot_env.sh
      env:
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_PASS: ${{ secrets.DB_PASS }}
    - name: Test the created .env file
      run: cat .env
    # ssh to deploy app
    - name: multiple command
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_KEY_PASSPHRASE }}
        script: |
          mkdir autodeploy
          cd autodeploy
          git clone git@github.com:ismailfakir/stockmanager-api-server.git
          ls -al

    # Install doctl.
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    # Build a Docker image of your application in your registry and tag the image with the $GITHUB_SHA.
    - name: Build container image
      run: docker build -t ${{ secrets.REGISTRY_NAME }}/stock-manager-api-server:$(echo $GITHUB_SHA | head -c7) .

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200

    - name: Push image to DigitalOcean Container Registry
      run: docker push ${{ secrets.REGISTRY_NAME }}/stock-manager-api-server:$(echo $GITHUB_SHA | head -c7)

    - name: DigitalOcean Registry Prune
      uses: PierreAndreis/do-registry-prune-tags@0.0.1
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    # build & push docker image to to dockerhub
    # - name: Docker Login
    #   uses: docker/login-action@v1.12.0
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v1
    # - name: Build and push
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     file: ./Dockerfile
    #     push: true
    #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/stock-manager-api-server:latest
